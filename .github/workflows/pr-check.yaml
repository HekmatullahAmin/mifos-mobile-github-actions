## Overview
#
# This reusable GitHub Actions workflow provides a comprehensive Continuous Integration (CI) pipeline
# for multi-platform mobile and desktop applications, specifically designed for projects using Gradle and Java/Kotlin.
#
### Key Features
# - Automated code quality checks
# - Dependency management and verification
# - Cross-platform desktop application builds (Windows, Linux, MacOS)
# - Android APK build generation
# - Artifact generation and storage
#
### Workflow Jobs
# 1. **Setup**: Prepares the build environment
#   - Checks out repository code
#   - Sets up Java 17
#   - Configures Gradle
#   - Manages dependency caching
#
# 2. **Code Quality Checks**:
#   - Build logic verification
#   - Code formatting checks (Spotless)
#   - Static code analysis (Detekt)
#
# 3. **Dependency Guard**:
#   - Verifies dependencies against baseline
#   - Prevents unauthorized dependency changes
#   - Supports automatic baseline updates
#
# 4. **Android App Build**:
#   - Builds debug APK for demo flavor
#   - Uploads APK artifacts
#
# 5. **Desktop App Build**:
#   - Builds applications for Windows, Linux, and MacOS
#   - Generates platform-specific executables and packages
#
### Prerequisites
#   - Java 17
#   - Gradle
#   - Configured build scripts for:
#       - Android module
#       - Desktop module
#   - Installed Gradle plugins:
#       - Spotless
#       - Detekt
#       - Dependency Guard
#
### Configuration Parameters
# The workflow requires two input parameters:
#
#   | Parameter | Description | Type | Required |
#   |-----------|-------------|------|----------|
#   | `android_package_name` | Name of the Android project module | String | Yes |
#   | `desktop_package_name` | Name of the Desktop project module | String | Yes |
#
### Usage Example
#   ```yaml
# name: PR Checks
# Trigger conditions for the workflow
#  on:
#    push:
#      branches: [ dev ]  # Runs on pushes to dev branch
#    pull_request:       # Runs on all pull requests
#
#  # Concurrency settings to prevent multiple simultaneous workflow runs
#  concurrency:
#    group: pr-${{ github.ref }}
#    cancel-in-progress: true  # Cancels previous runs if a new one is triggered
#
#  permissions:
#    contents: write
#
#  jobs:
#    pr_checks:
#      name: PR Checks
#      uses: openMF/mifos-mobile-github-actions/.github/workflows/pr-check.yaml@main
#      secrets: inherit
#      with:
#        android_package_name: 'mifospay-android'
#        desktop_package_name: 'mifospay-desktop'
#   ```
#
# GitHub Actions workflow for continuous integration of Mobile-Wallet project
# Runs on master and dev branches to ensure code quality and build stability
name: Debug Build & PR Checks

# Trigger conditions for the workflow
on:
  workflow_call:
    inputs:
      android_package_name:
        description: 'Name of the Android project module'
        type: string
        required: true

      desktop_package_name:
        description: 'Name of the Desktop project module'
        type: string
        required: true

# Concurrency settings to prevent multiple simultaneous workflow runs
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true  # Cancels previous runs if a new one is triggered

jobs:
  # Initial setup job to prepare the environment
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Checkout repository code
      - uses: actions/setup-java@v4  # Setup Java environment
        with:
          distribution: 'zulu'
          java-version: 17
      - uses: gradle/actions/setup-gradle@v4  # Setup Gradle build tool

      # Cache Gradle dependencies and build outputs to speed up future builds
      - name: Cache Gradle and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

  # Code quality checks job
  checks:
    needs: setup  # Depends on setup job completion
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Define different types of checks to run in parallel
        check: [ build_logic, spotless, detekt ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      
      # Run different checks based on matrix value
      - name: Run ${{ matrix.check }}
        id: run_check
        run: |
          if [ "${{ matrix.check }}" = "build_logic" ]; then
            ./gradlew check -p build-logic  # Check build logic
          elif [ "${{ matrix.check }}" = "spotless" ]; then
            ./gradlew spotlessCheck --no-configuration-cache --no-daemon  # Check code formatting
          elif [ "${{ matrix.check }}" = "detekt" ]; then
            ./gradlew detekt  # Run static code analysis
          fi

      # Upload detekt analysis reports as artifacts
      - name: Upload Detekt Reports
        if: ${{ matrix.check == 'detekt' && steps.run_check.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: detekt-reports
          path: |
            **/build/reports/detekt/detekt.md



  # Dependency verification and management job
  dependency_guard:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      # Verify dependencies against baseline
      - name: Check Dependency Guard
        id: dependencyguard_verify
        continue-on-error: true
        run: ./gradlew :${{ inputs.android_package_name }}:dependencyGuard

      # Prevent baseline updates on fork PRs
      - name: Prevent updating Dependency Guard baselines if this is a fork
        id: checkfork_dependencyguard
        if: steps.dependencyguard_verify.outcome == 'failure' && github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "::error::Dependency Guard failed, please update baselines with: ./gradlew dependencyGuardBaseline" && exit 1

      # Generate new dependency baselines if verification fails
      - name: Generate new Dependency Guard baselines if verification failed and it's a PR
        id: dependencyguard_baseline
        if: steps.dependencyguard_verify.outcome == 'failure' && github.event_name == 'pull_request'
        run: |
          ./gradlew :${{ inputs.android_package_name }}:dependencyGuardBaseline

      # Automatically commit new baselines if generated
      - name: Push new Dependency Guard baselines if available
        uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.dependencyguard_baseline.outcome == 'success'
        with:
          file_pattern: '**/dependencies/*.txt'
          disable_globbing: true
          commit_message: "ðŸ¤– Updates baselines for Dependency Guard"

  # Android app build job
  build:
    needs: [ checks, dependency_guard ]  # Requires successful checks and dependency verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      # Build debug APK for demo flavor
      - name: Build APKs
        run: ./gradlew :${{ inputs.android_package_name }}:assembleDemoDebug

      # Upload built APKs as artifacts
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: Android APKs
          path: '**/build/outputs/apk/**/*.apk'

  # Desktop application build job for multiple platforms
  build_desktop_app:
    needs: [ checks, dependency_guard ]
    strategy:
      matrix:
        # Build for Windows, Linux, and MacOS
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      # Build desktop application for current OS
      - name: Build Desktop App
        run: ./gradlew packageDistributionForCurrentOS

      # Upload Windows executables and installers
      - name: Upload Windows Apps
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Windows-Apps
          path: |
            ./${{ inputs.desktop_package_name }}/build/compose/binaries/main/exe/*.exe
            ./${{ inputs.desktop_package_name }}/build/compose/binaries/main/msi/*.msi

      # Upload Linux package
      - name: Upload Linux App
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Linux-App
          path: './${{ inputs.desktop_package_name }}/build/compose/binaries/main/deb/*.deb'

      # Upload MacOS package
      - name: Upload MacOS App
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: MacOS-App
          path: './${{ inputs.desktop_package_name }}/build/compose/binaries/main/dmg/*.dmg'