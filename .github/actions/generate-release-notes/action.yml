name: 'Create Release Notes'
description: 'Creates the current releases release notes'
inputs:
  tag-name:
    description: 'Name of the tag that will be used for this release'
    required: true
  gh-token:
    description: 'The GitHub token used to get details from the API'
    required: true
  target_branch:
    description: 'Target branch for release notes'
    default: 'dev'
    required: true
  android_package_name:
    description: 'Android package name for changelog output path'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: caller-repo

    - name: Get Previous Release Tag
      uses: actions/github-script@v7
      id: latest-release-tag
      with:
        github-token: ${{ inputs.gh-token }}
        result-encoding: string
        script: |
          try {
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            return data.tag_name;
          } catch (error) {
            // If no previous release exists, return an empty string
            return '';
          }

    - name: Get Generated Release Notes
      uses: actions/github-script@v7
      id: generate-notes
      with:
        github-token: ${{ inputs.gh-token }}
        result-encoding: string
        script: |
          const previousTag = '${{ steps.latest-release-tag.outputs.result }}';
          const params = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ inputs.tag-name }}',
            target_commitish: '${{ inputs.target_branch }}'
          };

          // Only add previous tag if it exists
          if (previousTag) {
            params.previous_tag_name = previousTag;
          }

          const { data } = await github.rest.repos.generateReleaseNotes(params);
          return data.body.replaceAll('`', '\'').replaceAll('"', '\'');

    - name: Generate Release Notes
      id: version-generator
      shell: bash
      run: |
        echo "Previous Release Tag:"
        echo "${{ steps.latest-release-tag.outputs.result }}"
        
        echo "Full Changelog:"
        CHANGELOG="${{ steps.generate-notes.outputs.result }}"
        echo -e "$CHANGELOG"
        printf "$CHANGELOG" > caller-repo/changelogGithub

        echo "Beta Changelog:"
        cd caller-repo
        git log --format="* %s" HEAD^..HEAD > changelogBeta